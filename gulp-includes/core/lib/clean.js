const config = require('../../gulp-configuration'),
    log = require('./log'),
    upath = require('upath'),
    rls = require('remove-leading-slash'),
    fs = require('fs-extra'),
    glob = require('glob'),
    prependFile = require('prepend-file'),
    os = require('os'),
    prompt = require('prompt');

module.exports = {
    clean : function (callback) {
        var success = true;
        log.info('This task isn\'t meant to be used on a real project. It may delete some of your files!');
        new Promise(function (resolve) {
            var schema = {
                properties : {
                    'yes/no' : {
                        pattern : /^yes|no|y|n|YES|NO|Y|N+$/,
                        type : 'string',
                        message : 'We didn\'t understand your answer.',
                        required : true
                    }
                }
            };
            log.info('Generated assets will be erased. Continue?');
            prompt.start();
            prompt.get(schema, function (err, result) {
                if (err) {
                    success = false;
                    console.log(os.EOL);
                    log.error(err);
                    console.log(os.EOL);
                } else {
                    if (result['yes/no'].match(/^yes|y|YES|Y+$/) != null) {
                        log.info('Starting cleaning...');
                        var paths_to_erase = [
                            rls(config.generateFavicon.output)
                        ];
                        if (config.generateGitignore.enable) {
                            paths_to_erase.push(rls('./.gitignore'));
                        }
                        if (config.generateJs.enable) {
                            var jsFiles = glob.sync(rls(upath.join(rls(config.generateJs.src_path), '*.js')));
                            jsFiles.forEach(function (file) {
                                var filename = upath.basename(file);
                                delete require.cache[require.resolve('../../js/' + filename)];
                                var fileConfig = require('../../js/' + filename);
                                fileConfig = JSON.parse(JSON.stringify(fileConfig));
                                paths_to_erase.push(
                                    rls(upath.join(rls(fileConfig.output_path), filename)),
                                    rls(upath.join(rls(fileConfig.output_path), filename + '.map'))
                                );
                            });
                        }
                        if (config.generateCss.enable) {
                            paths_to_erase.push(
                                rls(upath.join(rls(config.generateCss.output_path), '*.css')),
                                rls(upath.join(rls(config.generateCss.output_path), '*.css.map'))
                            );
                        }
                        if (config.generateHtml.enable) {
                            paths_to_erase.push(rls(upath.join(rls(config.generateHtml.output), '*.html')));
                            paths_to_erase.push(rls(upath.join(rls(config.generateHtml.output), 'gulp-documentation')));
                        }
                        paths_to_erase.forEach(function (filepath) {
                            glob.sync(filepath).forEach(function (realfilepath) {
                                fs.removeSync(realfilepath);
                            });
                        });
                        if (config.generateGitignore.enable) {
                            fs.copySync(rls(upath.join(rls('./gulp-includes/'), rls('.gitignore'))), './.gitignore');
                            fs.appendFileSync('./.gitignore', os.EOL + '### /!\\ Do not edit this file. See : gulp-includes/.gitignore /!\\ ###');
                            prependFile.sync('./.gitignore', '### /!\\ Do not edit this file. See : gulp-includes/.gitignore /!\\ ###' + os.EOL);
                        } else {
                            success = false;
                        }
                    } else {
                        success = false;
                    }
                }
                resolve(success);
            });
        }).then(function (success) {
            prompt.stop();
            if (callback) {
                callback(success);
            }
        });
    }
};